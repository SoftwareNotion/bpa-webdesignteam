// this file exists as a reference so i can properly re write the code needed for the cart system

function increment() {
    fetch('/increment2', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        }
    })
    .then(response => response.json())
    .then(data => {
        document.getElementsByClassName('cart-item-count')[0].innerText = data.num_cart_items;
        document.getElementById('nums-value').innerText = data.num_cart_items;
        document.getElementById('cart-message').innerText = `you have ${data.num_cart_items} items in your cart`;
    })
    .catch(error => {
        console.error('Error:', error);
    });
}

function decrement() {
    fetch('/decrement', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        }
    })
    .then(response => response.json())
    .then(data => {
        if (data.num_cart_items < 1) {
            document.getElementById('nums-value').innerText = data.num_cart_items;
            document.getElementById('cart-message').innerText = 'You currently have no items in your cart!';
            var cart_item = document.getElementsByClassName('cart-item')[0];
            cart_item.parentNode.removeChild(cart_item);
        } else {
            document.getElementsByClassName('cart-item-count')[0].innerText = data.num_cart_items;
            document.getElementById('nums-value').innerText = data.num_cart_items;
            document.getElementById('cart-message').innerText = `you have ${data.num_cart_items} items in your cart`;
        }
    })
    .catch(error => {
        console.error('Error:', error);
    });
}

current_node_history = [];
function incrementCartItems(current_node) {
    // Send a POST request to increment the nums variable
    fetch('/increment', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
            // 'Accept': 'text/plain'
        }
    })
    .then(response => response.json())
    .then(data => {
        
        var div_element = document.createElement('div'); // this div contains the entire general cart item 
        var button_div = document.createElement('div'); // this div contains the buttons 
        var add_button = document.createElement('button'); // this button adds the item to the cart
        var item_count = document.createElement('p'); // this p contains the number of items in the cart
        var remove_button = document.createElement('button'); // this button removes the item from the cart
        var merch_item = current_node.previousElementSibling.previousElementSibling.innerText;
        var merch_price = current_node.previousElementSibling.innerText;

        if (!current_node_history.includes(current_node)) {
            current_node_history.push(current_node);
            console.log(`${current_node_history} is the current_node_history`);

            if (data.first_cart_item < 1) {
                openShoppingBag();
            }
    
            div_element.setAttribute('class', 'cart-item');
            button_div.setAttribute('class', 'cart-item-buttons');
            button_div.setAttribute('style', 'display: flex; align-items: center;');
            add_button.setAttribute('onclick', 'increment()');
            add_button.setAttribute('class', 'cart-button');
            item_count.setAttribute('class', 'cart-item-count');
            remove_button.setAttribute('onclick', 'decrement()');
            remove_button.setAttribute('class', 'cart-button');
    
            add_button.innerText = '+';
            item_count.innerText = data.num_cart_items;
            remove_button.innerText = '-';
    
            button_div.appendChild(add_button);
            button_div.appendChild(item_count);
            button_div.appendChild(remove_button);
    
            div_element.innerText = merch_item + ' - ' + merch_price;
            document.getElementById('nums-value').innerText = data.num_cart_items;
            document.getElementById('cart-message').innerText = `you have ${data.num_cart_items} items in your cart`;
            div_element.appendChild(button_div);
            document.getElementById('cart-items').appendChild(div_element);
    
            console.log(data)
        } else {
            increment();
        }

    })
    .catch(error => {
        console.error('Error:', error);
    });
}

function removeCartItems() {
    // Send a POST request to remove the nums variable
    fetch('/remove', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'Accept': 'text/plain'
        }
    })
    .then(response => response.text())
    .then(data => {
        // Update the displayed value of nums
        function removeCartItemsByClass(parent_selector, class_name) {
            var parent_element = document.getElementById(parent_selector);
            var child_elements = document.getElementsByClassName(class_name);
            while(child_elements.length > 0) {
                parent_element.removeChild(child_elements[0]);
            }
        }
        removeCartItemsByClass('cart-items', 'cart-item');
        document.getElementById('nums-value').innerText = data;
        document.getElementById('cart-message').innerText = 'You currently have no items in your cart!';
    })
    .catch(error => {
        console.error('Error:', error);
    });
}